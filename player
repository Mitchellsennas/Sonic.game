#include "Player.h"
#include <SFML/Window.hpp>
#include <cmath>

Player::Player() {
    body.setRadius(20.f);
    body.setOrigin(20.f, 20.f);
    body.setFillColor(sf::Color::Blue);
    pos = {200.f, 420.f};

    // Green floating label
    if (font.loadFromFile("assets/arial.ttf")) {
        label.setFont(font);
        label.setCharacterSize(14);
        label.setFillColor(sf::Color::Green);
        label.setString("Player: Sonic-like\nUse arrows or WASD + Space");
    }
}

void Player::handleInput(float dt) {
    vel.x = 0.f;
    if (sf::Keyboard::isKeyPressed(sf::Keyboard::A)) vel.x -= moveSpeed;
    if (sf::Keyboard::isKeyPressed(sf::Keyboard::D)) vel.x += moveSpeed;
    if ((sf::Keyboard::isKeyPressed(sf::Keyboard::W) ||
         sf::Keyboard::isKeyPressed(sf::Keyboard::Up) ||
         sf::Keyboard::isKeyPressed(sf::Keyboard::Space)) && onGround) {
        vel.y = -jumpSpeed;
        onGround = false;
    }
}

void Player::applyPhysics(float dt) {
    vel.y += gravity * dt;
    pos += vel * dt;
    if (pos.y > 420) { pos.y = 420; vel.y = 0; onGround = true; }
}

void Player::update(float dt) {
    handleInput(dt);
    applyPhysics(dt);

    body.setPosition(pos);
    spinAngle += 720.f * dt;
    body.setRotation(spinAngle);

    if (invulnTimer > 0) invulnTimer -= dt;

    label.setPosition(pos.x - 40, pos.y - 60);
}

void Player::draw(sf::RenderWindow& win) {
    win.draw(body);
    win.draw(label);
}

sf::FloatRect Player::bounds() const { return body.getGlobalBounds(); }
bool Player::isDescending() const { return vel.y > 0.f; }
void Player::bounce() { vel.y = -jumpSpeed * 0.6f; }
void Player::hurt(const sf::Vector2f& knock) { 
    if (invulnTimer <= 0) { hp--; vel = knock; invulnTimer = 1.5f; } 
}
int Player::getHP() const { return hp; }
int Player::getScore() const { return score; }
void Player::addScore(int s) { score += s; }
bool Player::canJump() const { return onGround; }
bool Player::isAlive() const { return hp > 0; }
sf::Vector2f Player::center() const { return pos; }


